# Receiving the dungeon map data

## Introduction

The dungeon map data contains both the tile information and the monster information. The monster data is covered [here](TBD).

## Structure of the map data

The tiles data sent is sent with the least amount of repeated information. Below is a dump of the `map` information according to the image. This dump is comparatively small, compared to most, because it only contains a very small proportion of the map. 

![](images/map/map_tiles_1.JPG)

```json
{'msg': 'map', 'clear': True, 'player_on_level': True, 'vgrdc': {'x': 0, 'y': 0}, 'cells': [{'x': -2, 'y': -8, 'mf': 26}, {'mf': 26}, {'mf': 26}, {'mf': 26}, {'x': -2, 'y': -7, 'mf': 26}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 4, 'ov': [2267]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 982}}, {'mf': 26}, {'x': -4, 'y': -6, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 979}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2266]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2264]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2263]}}, {'mf': 26}, {'x': -4, 'y': -5, 'mf': 26}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2263]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2263]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 9, 'ov': [2262]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2267]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 979}}, {'mf': 26}, {'x': -4, 'y': -4, 'mf': 26}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2266, 2267]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2266, 2264]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2263]}}, {'mf': 26}, {'x': -4, 'y': -3, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2261, 2264]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 3, 'ov': [2263]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 5, 'ov': [2267, 2262]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'x': -4, 'y': -2, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 982}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 7, 'ov': [2261, 2263]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2262]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 5}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 3, 'ov': [2264]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2263, 2265]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'x': -4, 'y': -1, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 5, 'ov': [2261]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 7}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 7}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 5, 'ov': [2265]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 983}}, {'x': -4, 'y': 0, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 982}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6, 'ov': [2261]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 2}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 2}}, {'f': 46, 'mf': 12, 'g': '@', 'col': 87, 't': {'fg': 530466, 'bg': 2492, 'flv': {'f': 3, 's': 174}, 'doll': [[6369, 32], [6327, 32], [6446, 32], [6497, 32], [7098, 32], [6734, 32]], 'mcache': None}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 4, 'ov': [2265]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 982}}, {'x': -4, 'y': 1, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 2, 'ov': [2261]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 7}}, {'f': 33, 'mf': 6, 'g': '?', 'col': 9, 't': {'fg': 3442, 'base': 0, 'bg': 1048578, 'doll': None, 'mcache': None}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 2}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 8, 'ov': [2265]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 979}}, {'x': -4, 'y': 2, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 9, 'ov': [2261]}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 6}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 5}}, {'f': 33, 'mf': 1, 'g': '.', 'col': 7, 't': {'bg': 3, 'ov': [2265]}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 979}}, {'x': -4, 'y': 3, 'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 981}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 982}}, {'f': 7, 'mf': 2, 'g': '#', 'col': 6, 't': {'bg': 980}}]}
```

The following is an exploration of the data seen above.

### `mf` information

Each cell will provide an 'mf' number. Here is the concordance list:

```
1: "floor",
2: "wall",
3: "magic mapping floor",
4: "magic mapping wall",
5: "door",
6: "item",
11: "plant",
12: "up stairs"
13: "down stairs"
14: "temple stairs"
15: "altar"
16: "shallow water"
17: "lava"
18: "ground hole"
22: "deep water"
23: "sewer entrance"
24: "portal (up or down)"
25: "portal (up or down)"
26: "unexplored"
```

### Data structure with `x` and `y`

The `cells` item value is a list of tiles. Only the first tile in a row, or the first tile after a series of "empty cells" in a row (cells not sent), will contain the `x` and `y` value. For example, the first cell in the list contains `'x': -2` and `'y': -8`. On the image, assuming the character is at `'x': 0` and `'y': 0` and that x negative is left and x positive is right, and that y negative is up and y positive is down, this cell is out of bound (labled '1' in the image). This cell contains `'mf': 26"` as it is unexplored. This data is followed by 3 cells without the `x` and `y` value (labled '2', '3' and '4' in the image), also all unexplored. All known tiles will always be bordered by either unexplored tiles or a wall, this is the reason why no data is provided for the "tile" labled '5', since there is no way of reaching this tile from the known tiles. Once a row is complete, the next item in the list will contain the `x` and `y` value for the next row.

### Glyph

Looking at the `g` data (glyph) in the known tiles will provide the `console` character for each tile. For example, a "floor" will have `.` and a "wall" will have `#`. The character will be labled as `@` and the invisible monsters will leave a disturbance labled as `{`.

## Updating the map data

During the processing of the game, the map data gets updated very frequently, but only near tiles (or tiles that update) get re-sent to the client. Below is an example of the updated data sent if the character moves down and to the left (`x: -1` and `y: 1`).

![](images/map/map_tiles_2.JPG)

```json
{'msg': 'map', 'vgrdc': {'x': -1, 'y': 1}, 'cells': [{'x': -2, 'y': -8, 'mf': 26}, {'mf': 26}, {'mf': 26}, {'mf': 26}, {'x': -2, 'y': -7, 'mf': 26}, {'col': 8, 't': {'bg': 262150}}, {'col': 8, 't': {'bg': 262146}}, {'col': 8, 't': {'bg': 263132}}, {'mf': 26}, {'x': -4, 'y': -6, 'col': 8, 't': {'bg': 263126}}, {'x': -1, 'y': -6, 'col': 8, 't': {'bg': 262147}}, {'x': 2, 'y': -6, 'mf': 26}, {'x': -4, 'y': -5, 'mf': 26}, {'x': -1, 'y': -5, 'col': 8, 't': {'bg': 262147}}, {'x': 2, 'y': -5, 'mf': 26}, {'x': -4, 'y': -4, 'mf': 26}, {'x': 2, 'y': -4, 'mf': 26}, {'x': 0, 'y': 0, 'g': '<', 'col': 2, 't': {'fg': 0, 'doll': None, 'mcache': None}}, {'x': -1, 'y': 1, 'g': '@', 'col': 87, 't': {'fg': 530466, 'doll': [[6369, 32], [6327, 32], [6446, 32], [6497, 32], [7098, 32], [6734, 32]], 'mcache': None}}]}
```

The data shows that the character (`'g': '@'`) is now located at `'x': -1` and `'y': 1` and where the character used to be (`'x': 0` and `'y': 0`) a up-stairs (`'g': '<'`) is now present.